#!/usr/bin/env perl

#
# AGI script that renders speech to text using Ispeech speech recognition engine.
#
# Copyright (C) 2011 - 2012, Eleftherios (Lefteris) Zafeiris <zaf.000@gmail.com>
#
# asterisk-tts.agi is distributed under the BSD license
# see LICENSE for details.
#
# -----
# Usage
# -----
# agi(ispeech-asr.agi,[lang],[freeform],[model],[timeout],[intkey],[NOBEEP])
# Records from the current channel untill 3 seconds of silence are detected
# (this can be set by the user by the 'timeout' argument, -1 for no timeout) or the
# interrupt key (# by default) is pressed. If NOBEEP is set, no beep sound is played
# back to the user to indicate the start of the recording. For 'freeform' and 'model'
# please refer to the ispeech API manual. 'freeform' defaults to 3 (Normal speech)
# The recorded sound is send over to iSpeech ASR service and the
# returned text string is assigned as the value of the channel variable 'utterance'.
# The scripts sets the following channel variables:
# status     : Return status. 0 means success, non zero values indicate different errors.
# utterance  : The generated text string.
# confidence : A value between 0 and 1 indicating how 'confident' the recognition engine
#     feels about the result. Values bigger than 0.90 usually mean that the
#     resulted text is correct.
#
# User defined parameters:
# Default language:
#	$language
#
# Default timeout:
#	$timeout (value in seconds of silence before recording is stopped)
#
# Default interupt key:
#	$intkey (can be any digit from 0 to 9 or # and *, or a combination of them)
#
# Speech encoder:
#	$use_speex (encode sound data with speex voice encoder. 0: disable, 1: enable)
#
# SSL:
#	$use_ssl (Use SSl for network traffic encryption. 0: disable, 1: enable)
#
# An API key is a password that is required for access. To obtain an API key please visit:
# http://www.ispeech.org/developers and register for a developer account.


use warnings;
use strict;
use MIME::Base64;
use CGI::Util qw(escape unescape);
use File::Temp qw(tempfile);
use LWP::UserAgent;
$| = 1;

# ----------------------------- #
#   User defined parameters:    #
# ----------------------------- #
# Ispeech API key               #
my $key = "";

# Default language              #
my $language = "en-US";

# Default max silence timeout   #
my $timeout = 2;

# Default interrupt key         #
my $intkey = "#";

# Use speex                     #
my $use_speex = 0;

# Use SSL                       #
my $use_ssl = 0;

# Verbose debugging messages    #
my $debug = 0;

# ----------------------------- #

my %AGI;
my $ua;
my $fh;
my $tmpname;
my @result;
my $name;
my $audio;
my $uaresponse;
my %response;
my $url;
my $silence;
my $filetype;
my $model;
my $freeform   = "3";
my $format     = "wav";
my $beep       = "BEEP";
my $ua_timeout = "10";
my $tmpdir     = "/tmp";
my $host       = "api.ispeech.org/api/rest";
my $speex      = `/usr/bin/which speexenc`;
my @models     = qw(assistant date nfl nba usmoney numbersto9 numbersto99 numbersto999 time phonenumber streets sportsteam citystate);

# Store AGI input #
while (<STDIN>) {
	chomp;
	last if (!length);
	$AGI{$1} = $2 if (/^agi_(\w+)\:\s+(.*)$/);
}
# $language    $freeform    $model       $timeout     $intkey      $beep #
($AGI{arg_1}, $AGI{arg_2}, $AGI{arg_3}, $AGI{arg_4}, $AGI{arg_5}, $AGI{arg_6}) = @ARGV;

$name = " -- $AGI{request}:";

die "$name No API key found. Aborting.\n" if (!$key);

# Reset variables. #
%response = (
	utterance  => "-1",
	status     => "-1",
	confidence => "-1",
);
warn "$name Clearing channel variables.\n" if ($debug);
foreach (keys %response) {
	print "SET VARIABLE \"$_\" \"$response{$_}\"\n";
	checkresponse();
}

# Warn if required programs not found. #
if ($use_speex && !$speex) {
	warn "$name speexenc is missing.\n";
	$use_speex = 0;
}
warn "$name Found speexenc in: $speex" if ($debug and $use_speex);

# Setting language, freeform, model, timeout, interrupt keys and BEEP indication #
if (length($AGI{arg_1})) {
	$language = $AGI{arg_1} if ($AGI{arg_1} =~ /^[a-z]{2}(-[a-zA-Z]{2,6})?$/);
}

if (length($AGI{arg_2})) {
	$freeform = $AGI{arg_2} if ($AGI{arg_1} >= 1 and $AGI{arg_1} <= 7);
}

if (length($AGI{arg_3})) {
	for (@models) {
		$model = $AGI{arg_3} if ($AGI{arg_3} eq $_);
	}
}

if (length($AGI{arg_4})) {
	if ($AGI{arg_4} == -1) {
		$silence = "";
	} elsif ($AGI{arg_4} =~ /^\d+$/) {
		$silence = "s=$AGI{arg_2}";
	} else {
		$silence = "s=$timeout";
	}
} else {
	$silence = "s=$timeout";
}

if (length($AGI{arg_5})) {
	$intkey = "0123456789#*" if ($AGI{arg_5} eq "any");
	$intkey = $AGI{arg_5} if ($AGI{arg_5} =~ /^[0-9*#]+$/);
}

if (length($AGI{arg_6})) {
	$beep = "" if ($AGI{arg_6} eq "NOBEEP");
}

# Answer channel if not already answered #
warn "$name Checking channel status.\n" if ($debug);
print "CHANNEL STATUS\n";
@result = checkresponse();
if ($result[0] == 4) {
	warn "$name Answering channel.\n" if ($debug);
	print "ANSWER\n";
	checkresponse();
}

# Initialise User angent #
if ($use_ssl) {
	$url = "https://" . $host;
	$ua  = LWP::UserAgent->new(ssl_opts => {verify_hostname => 1});
} else {
	$url = "http://" . $host;
	$ua  = LWP::UserAgent->new;
}
$ua->agent("Asterisk iSpeech ASR module");
$ua->env_proxy;
$ua->timeout($ua_timeout);

# Hnadle interrupts #
$SIG{'INT'} = \&int_handler;
$SIG{'HUP'} = \&int_handler;

# Record file #
($fh, $tmpname) = tempfile("ispeech-asr_XXXXXX", DIR => $tmpdir, UNLINK => 1);
print "RECORD FILE $tmpname $format \"$intkey\" \"-1\" $beep \"$silence\"\n";
@result = checkresponse();
die "$name Failed to record file, aborting...\n" if ($result[0] == -1);

if ($debug) {
	warn "$name Recording Format: $format, ",
		"Encoding format: ", ($use_speex) ? "speex" : "wav", "\n",
		"$name Languge: $language, SSL: ", ($use_ssl) ? "yes, " : "no, ",
		"$silence, Interrupt keys: $intkey\n";
}

# Encode sound data #
if ($use_speex) {
	$filetype = "audio/speex";
	# Encode file to speex. #
	chomp($speex);
	system($speex, "--vbr", "--quiet", "$tmpname.$format", "$tmpname.spx") == 0
		or die "$name $speex failed: $?\n";
	open($fh, "<", "$tmpname.spx") or die "Can't read file: $!";
} else {
	$filetype = "audio/x-wav";
	open($fh, "<", "$tmpname.wav") or die "Can't read file: $!";
}

# Read audio data #
$audio = do { local $/; <$fh> };
close($fh);
$audio = encode_base64($audio);
$audio =~ s/\R//g;

$language = escape($language);
$url .= "?apikey=$key&action=recognize&locale=$language";

if ($model) {
	$model = escape($model);
	$url .= "&model=$model";
} else {
	$freeform = escape($freeform);
	$url .= "&freeform=$freeform";
}

$url .= "&content-type=$filetype&audio=$audio";
$url .= "&speexmode=1" if ($use_speex);

# Send adio data for analysis #
$uaresponse = $ua->post("$url");
die "$name Unable to get speech data.\n" if (!$uaresponse->is_success);

warn "$name The response was: ", $uaresponse->decoded_content if ($debug);
if ($uaresponse->code != 200) {
	die "$name An iSpeech API error occured: " . unescape($uaresponse->decoded_content) . "\n";
}

if ($uaresponse->decoded_content =~ /^text=(.*)&confidence=(.*)&result=(.*)$/) {
	$response{status} = "0" if($3 eq "success");
	warn "$name Error reading audio file\n" if ($response{status});
	$response{utterance}  = unescape($1);
	$response{confidence} = "$2";
}

foreach (keys %response) {
	warn "$name Setting variable: $_ = $response{$_}\n" if ($debug);
	print "SET VARIABLE \"$_\" \"$response{$_}\"\n";
	checkresponse();
}
exit;

sub checkresponse {
	my $input = <STDIN>;
	my @values;

	chomp $input;
	if ($input =~ /^200/) {
		$input =~ /result=(-?\d+)\s?(.*)$/;
		if (!length($1)) {
			warn "$name Command failed: $input\n";
			@values = (-1, -1);
		} else {
			warn "$name Command returned: $input\n" if ($debug);
			@values = ("$1", "$2");
		}
	} else {
		warn "$name Unexpected result: $input\n";
		@values = (-1, -1);
	}
	return @values;
}

sub int_handler {
	die "$name Interrupt signal received, terminating...\n";
}

END {
	if ($tmpname) {
		warn "$name Cleaning temp files.\n" if ($debug);
		unlink glob "$tmpname.*";
	}
}
